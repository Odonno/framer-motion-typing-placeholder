import type { NextPage } from "next";
import { useEffect, useState } from "react";
import { useMotionValue, animate } from "framer-motion";

const placeholders = [
  "Hello world",
  "This is magic",
  "Welcome to a wonderful demo",
  "Generated by GitHub Copilot?",
  "This is a not a demo of GitHub Copilot",
];

const getRandomIndex = () => {
  return Math.floor(Math.random() * placeholders.length);
};

type AnimatedInputProps = {
  from: string;
  to: string;
  onComplete?: () => void;
};

const AnimatedInput = ({ from, to, onComplete }: AnimatedInputProps) => {
  const [placeholder, setPlaceholder] = useState(from);
  const lengthValue = useMotionValue(0);

  const text = from || to;

  useEffect(() => {
    const controls = animate(lengthValue, to.length, {
      type: "tween",
      duration: 0.045 * text.length,
      onComplete: () => {
        if (onComplete) {
          onComplete();
        }
      },
    });

    return controls.stop;
  }, [lengthValue, from, to, text, onComplete]);

  useEffect(() => {
    return lengthValue.onChange((length) => {
      const roundedLength = Math.ceil(length);
      setPlaceholder(text.substring(0, roundedLength));
    });
  }, [lengthValue, text]);

  return <input type="text" placeholder={placeholder} />;
};

const Home: NextPage = () => {
  const [index, setIndex] = useState(getRandomIndex());
  const [from, setFrom] = useState("");
  const [to, setTo] = useState(placeholders[index]);

  const onPlaceholderComplete = () => {
    if (from === "") {
      setTimeout(() => {
        setFrom(to);
        setTo("");
      }, 5000);
    } else {
      let newIndex = getRandomIndex();

      while (newIndex === index) {
        newIndex = getRandomIndex();
      }

      setIndex(newIndex);
      setFrom("");
      setTo(placeholders[newIndex]);
    }
  };

  return (
    <div className="container">
      <AnimatedInput from={from} to={to} onComplete={onPlaceholderComplete} />
    </div>
  );
};

export default Home;
